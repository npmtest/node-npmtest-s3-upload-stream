{"/home/travis/build/npmtest/node-npmtest-s3-upload-stream/test.js":"/* istanbul instrument in package npmtest_s3_upload_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-s3-upload-stream/lib.npmtest_s3_upload_stream.js":"/* istanbul instrument in package npmtest_s3_upload_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_s3_upload_stream = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_s3_upload_stream = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-s3-upload-stream/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-s3-upload-stream && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_s3_upload_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_s3_upload_stream\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_s3_upload_stream.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_s3_upload_stream.rollup.js'] =\n            local.assetsDict['/assets.npmtest_s3_upload_stream.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_s3_upload_stream.__dirname + '/lib.npmtest_s3_upload_stream.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-s3-upload-stream/node_modules/s3-upload-stream/lib/s3-upload-stream.js":"var Writable = require('stream').Writable,\n    events = require(\"events\");\n\n// Set the S3 client to be used for this upload.\nfunction Client(client) {\n  if (this instanceof Client === false) {\n    return new Client(client);\n  }\n\n  if (!client) {\n    throw new Error('Must configure an S3 client before attempting to create an S3 upload stream.');\n  }\n\n  this.cachedClient = client;\n}\n\n// Generate a writeable stream which uploads to a file on S3.\nClient.prototype.upload = function (destinationDetails, sessionDetails) {\n  var cachedClient = this.cachedClient;\n  var e = new events.EventEmitter();\n\n  if (!sessionDetails) sessionDetails = {};\n\n  // Create the writable stream interface.\n  var ws = new Writable({\n    highWaterMark: 4194304 // 4 MB\n  });\n\n  // Data pertaining to the overall upload.\n  // If resumable parts are passed in, they must be free of gaps.\n  var multipartUploadID = sessionDetails.UploadId ? sessionDetails.UploadId : null;\n  var partNumber = sessionDetails.Parts ? (sessionDetails.Parts.length + 1) : 1;\n  var partIds = sessionDetails.Parts || [];\n  var receivedSize = 0;\n  var uploadedSize = 0;\n\n  // Light state management -\n  //   started: used to fire 'ready' even on a quick resume\n  //   paused:  used to govern manual pause/resume\n  var started = false;\n  var paused = false;\n\n  // Parts which need to be uploaded to S3.\n  var pendingParts = 0;\n  var concurrentPartThreshold = 1;\n\n  // Data pertaining to buffers we have received\n  var receivedBuffers = [];\n  var receivedBuffersLength = 0;\n  var partSizeThreshold = 5242880;\n\n  // Set the maximum amount of data that we will keep in memory before flushing it to S3 as a part\n  // of the multipart upload\n  ws.maxPartSize = function (partSize) {\n    if (partSize < 5242880)\n      partSize = 5242880;\n\n    partSizeThreshold = partSize;\n    return ws;\n  };\n\n  ws.getMaxPartSize = function () {\n    return partSizeThreshold;\n  };\n\n  // Set the maximum amount of data that we will keep in memory before flushing it to S3 as a part\n  // of the multipart upload\n  ws.concurrentParts = function (parts) {\n    if (parts < 1)\n      parts = 1;\n\n    concurrentPartThreshold = parts;\n    return ws;\n  };\n\n  ws.getConcurrentParts = function () {\n    return concurrentPartThreshold;\n  };\n\n  // Handler to receive data and upload it to S3.\n  ws._write = function (incomingBuffer, enc, next) {\n    // Pause/resume check #1 out of 2:\n    //   Block incoming writes immediately on pause.\n    if (paused)\n      e.once('resume', write);\n    else\n      write();\n\n    function write() {\n      absorbBuffer(incomingBuffer);\n\n      if (receivedBuffersLength < partSizeThreshold)\n        return next(); // Ready to receive more data in _write.\n\n      // We need to upload some data\n      uploadHandler(next);\n    }\n  };\n\n  // Ask the stream to pause - will allow existing\n  // part uploads to complete first.\n  ws.pause = function () {\n    // if already mid-pause, this does nothing\n    if (paused) return false;\n\n    // if there's no active upload, this does nothing\n    if (!started) return false;\n\n    paused = true;\n    // give caller how many parts are mid-upload\n    ws.emit('pausing', pendingParts);\n\n    // if there are no parts outstanding, declare the stream\n    // paused and return currently sent part details.\n    if (pendingParts === 0)\n      notifyPaused();\n\n    // otherwise, the 'paused' event will get sent once the\n    // last part finishes uploading.\n\n    return true;\n  };\n\n  // Lift the pause, and re-kick off the uploading.\n  ws.resume = function () {\n    // if we're not paused, this does nothing\n    if (!paused) return false;\n\n    paused = false;\n    e.emit('resume'); // internal event\n    ws.emit('resume'); // external event\n\n    return true;\n  };\n\n  // when pausing, return relevant pause state to client\n  var notifyPaused = function () {\n    ws.emit('paused', {\n      UploadId: multipartUploadID,\n      Parts: partIds,\n      uploadedSize: uploadedSize\n    });\n  };\n\n  // Concurrently upload parts to S3.\n  var uploadHandler = function (next) {\n\n    // If this is the first part, and we're just starting,\n    // but we have a multipartUploadID, then we're beginning\n    // a resume and can fire the 'ready' event externally.\n    if (multipartUploadID && !started)\n      ws.emit('ready', multipartUploadID);\n\n    started = true;\n\n    if (pendingParts < concurrentPartThreshold) {\n      // Has the MPU been created yet?\n      if (multipartUploadID)\n        upload(); // Upload the part immediately.\n      else {\n        e.once('ready', upload); // Wait until multipart upload is initialized.\n        createMultipartUpload();\n      }\n    }\n    else {\n      // Block uploading (and receiving of more data) until we upload\n      // some of the pending parts\n      e.once('part', upload);\n    }\n\n    function upload() {\n\n      // Pause/resume check #2 out of 2:\n      //   Block queued up parts until resumption.\n      if (paused)\n        e.once('resume', uploadNow);\n      else\n        uploadNow();\n\n      function uploadNow() {\n        pendingParts++;\n        flushPart(function (partDetails) {\n          --pendingParts;\n          e.emit('part'); // Internal event\n          ws.emit('part', partDetails); // External event\n\n          // if we're paused and this was the last outstanding part,\n          // we can notify the caller that we're really paused now.\n          if (paused && pendingParts === 0)\n            notifyPaused();\n        });\n        next();\n      }\n    }\n  };\n\n  // Absorb an incoming buffer from _write into a buffer queue\n  var absorbBuffer = function (incomingBuffer) {\n    receivedBuffers.push(incomingBuffer);\n    receivedBuffersLength += incomingBuffer.length;\n  };\n\n  // Take a list of received buffers and return a combined buffer that is exactly\n  // partSizeThreshold in size.\n  var preparePartBuffer = function () {\n    // Combine the buffers we've received and reset the list of buffers.\n    var combinedBuffer = Buffer.concat(receivedBuffers, receivedBuffersLength);\n    receivedBuffers.length = 0; // Trick to reset the array while keeping the original reference\n    receivedBuffersLength = 0;\n\n    if (combinedBuffer.length > partSizeThreshold) {\n      // The combined buffer is too big, so slice off the end and put it back in the array.\n      var remainder = new Buffer(combinedBuffer.length - partSizeThreshold);\n      combinedBuffer.copy(remainder, 0, partSizeThreshold);\n      receivedBuffers.push(remainder);\n      receivedBuffersLength = remainder.length;\n\n      // Return the perfectly sized part.\n      var uploadBuffer = new Buffer(partSizeThreshold);\n      combinedBuffer.copy(uploadBuffer, 0, 0, partSizeThreshold);\n      return uploadBuffer;\n    }\n    else {\n      // It just happened to be perfectly sized, so return it.\n      return combinedBuffer;\n    }\n  };\n\n  // Flush a part out to S3.\n  var flushPart = function (callback) {\n    var partBuffer = preparePartBuffer();\n\n    var localPartNumber = partNumber;\n    partNumber++;\n    receivedSize += partBuffer.length;\n    cachedClient.uploadPart(\n      {\n        Body: partBuffer,\n        Bucket: destinationDetails.Bucket,\n        Key: destinationDetails.Key,\n        UploadId: multipartUploadID,\n        PartNumber: localPartNumber\n      },\n      function (err, result) {\n        if (err)\n          abortUpload('Failed to upload a part to S3: ' + JSON.stringify(err));\n        else {\n          uploadedSize += partBuffer.length;\n          partIds[localPartNumber - 1] = {\n            ETag: result.ETag,\n            PartNumber: localPartNumber\n          };\n\n          callback({\n            ETag: result.ETag,\n            PartNumber: localPartNumber,\n            receivedSize: receivedSize,\n            uploadedSize: uploadedSize\n          });\n        }\n      }\n    );\n  };\n\n  // Overwrite the end method so that we can hijack it to flush the last part and then complete\n  // the multipart upload\n  ws.originalEnd = ws.end;\n  ws.end = function (Part, encoding, callback) {\n    ws.originalEnd(Part, encoding, function afterDoneWithOriginalEnd() {\n      if (Part)\n        absorbBuffer(Part);\n\n      // Upload any remaining data\n      var uploadRemainingData = function () {\n        if (receivedBuffersLength > 0) {\n          uploadHandler(uploadRemainingData);\n          return;\n        }\n\n        if (pendingParts > 0) {\n          setTimeout(uploadRemainingData, 50); // Wait 50 ms for the pending uploads to finish before trying again.\n          return;\n        }\n\n        completeUpload();\n      };\n\n      uploadRemainingData();\n\n      if (typeof callback == 'function')\n        callback();\n    });\n  };\n\n  // Turn all the individual parts we uploaded to S3 into a finalized upload.\n  var completeUpload = function () {\n    // There is a possibility that the incoming stream was empty, therefore the MPU never started\n    // and cannot be finalized.\n    if (multipartUploadID) {\n      cachedClient.completeMultipartUpload(\n        {\n          Bucket: destinationDetails.Bucket,\n          Key: destinationDetails.Key,\n          UploadId: multipartUploadID,\n          MultipartUpload: {\n            Parts: partIds\n          }\n        },\n        function (err, result) {\n          if (err)\n            abortUpload('Failed to complete the multipart upload on S3: ' + JSON.stringify(err));\n          else {\n            // Emit both events for backwards compatibility, and to follow the spec.\n            ws.emit('uploaded', result);\n            ws.emit('finish', result);\n            started = false;\n          }\n        }\n      );\n    }\n  };\n\n  // When a fatal error occurs abort the multipart upload\n  var abortUpload = function (rootError) {\n    cachedClient.abortMultipartUpload(\n      {\n        Bucket: destinationDetails.Bucket,\n        Key: destinationDetails.Key,\n        UploadId: multipartUploadID\n      },\n      function (abortError) {\n        if (abortError)\n          ws.emit('error', rootError + '\\n Additionally failed to abort the multipart upload on S3: ' + abortError);\n        else\n          ws.emit('error', rootError);\n      }\n    );\n  };\n\n  var createMultipartUpload = function () {\n    cachedClient.createMultipartUpload(\n      destinationDetails,\n      function (err, data) {\n        if (err)\n          ws.emit('error', 'Failed to create a multipart upload on S3: ' + JSON.stringify(err));\n        else {\n          multipartUploadID = data.UploadId;\n          ws.emit('ready', multipartUploadID);\n          e.emit('ready'); // Internal event\n        }\n      }\n    );\n  };\n\n  return ws;\n};\n\nClient.globalClient = null;\n\nClient.client = function (options) {\n  Client.globalClient = new Client(options);\n  return Client.globalClient;\n};\n\nClient.upload = function (destinationDetails, sessionDetails) {\n  if (!Client.globalClient) {\n    throw new Error('Must configure an S3 client before attempting to create an S3 upload stream.');\n  }\n  return Client.globalClient.upload(destinationDetails, sessionDetails);\n};\n\nmodule.exports = Client;\n"}